openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/carlotacb/Organizator-API/1.0.0
  - description: LocalHost
    url: http://0.0.0.0:8000/organizator-api
  - description: Production API
    url: https://event-organizator-api-c6wz5mj4uq-ew.a.run.app/organizator-api
info:
  description: API for organizator app
  version: "0.0.1"
  title: Organizator API
  contact:
    name: Carlota Catot
    email: carkbra@gmail.com
    url: 'https://carlotacb.dev'
  license:
    name: MIT license
    url: 'https://opensource.org/license/mit'

tags:
  - name: events
    description: Everything about the events
  - name: users
    description: Everything about users

paths:

  # EVENTS

  /events/:
    get:
      tags:
        - events
      summary: Gets all the events of the system
      operationId: allEvents
      description: |
        Get absolutely all the events of the system with all the information
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventList'

  /events/{event_id}:
    get:
      tags:
        - events
      summary: Get event by id
      operationId: eventById
      description: |
        Get all the information for an event given a ID, also marking if the event has been deleted or not.
      parameters:
      - name: event_id
        in: path
        description: Event id
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found

  /events/new:
    post:
      tags:
        - events
      summary: Creates a new event
      operationId: newEvent
      description: |
        With the all the information for an event, be aware that the event name is unique and also the dates should be something logical.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreateItem'
        description: Event to add
      responses:
        '201':
          description: Event created correctly
        '409':
          description: Event already exists

  /events/update/{event_id}:
    post:
      tags:
        - events
      summary: Update event by id
      operationId: updateById
      description: |
        With some event information, not all the information is necessary to update, the event is updated. If you are not setting some of the parameters, they will stay as it was in the original event. The name should be diferent as any event from the database.
      parameters:
      - name: event_id
        in: path
        description: Event id
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventUpdateItem'
        description: Event information to update
      responses:
        '202':
          description: Event modified correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
        '409':
          description: Event already exist, there is some event with that name already

  /events/delete/{event_id}:
    post:
      tags:
        - events
      summary: Delete event by id
      operationId: deleteById
      description: |
        Given a event ID, the event is marked as deleted, the event is not deleted in the DB but the delete_at date is introduced with the current date, so the event is marked as deleted.
      parameters:
      - name: event_id
        in: path
        description: Event id
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '202':
          description: Event modified correctly
        '404':
          description: Event not found

  # USERS

  /users/:
    get:
      tags:
        - users
      summary: Gets all the users registered in the system
      operationId: allUsers
      description: |
        Get absolutely all the users of the system, with all the information about them
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'

  /users/{user_id}:
    get:
      tags:
        - users
      summary: Get user information by user id
      operationId: getUserByUserId
      description: |
        Get all the information of a user by giving the user id.
      parameters:
        - name: user_id
          in: path
          description: user_id of the user you want to get the information
          required: true
          schema:
            type: string
            format: "uuid"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

  /users/{username}:
    get:
      tags:
        - users
      summary: Get user information by username
      operationId: getUserByUsername
      description: |
        Get all the information of a user by giving the username.
      parameters:
        - name: username
          in: path
          description: username of the user you want to get the information
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

  /users/login:
    post:
      tags:
        - users
      summary: User login
      operationId: login
      description: |
        When user is logged in this have a token that will authenticate. This is the response of the call.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "carlota"
                password:
                  type: string
                  example: "******"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    format: "uuid"
                    example: "ef6f6fb3-ba12-43dd-a0da-95de8125b1cc"
        '401':
          description: Invalid password
        '404':
          description: User not found

  /users/me:
    get:
      tags:
        - users
      summary: Get my information
      operationId: getMyInformation
      security:
        - LoggedInToken: [ ]
      description: |
        Get all the information of my profile.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: User not found

  /users/new:
    post:
      tags:
        - users
      summary: Creates a new user with the basic information
      operationId: newUser
      description: |
        With the base information of a user, you can create a user be aware that the username and the email should be unique. 

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateItem'
      responses:
        '201':
          description: User created correctly
        '422':
          description: Unexpected body
        '409':
          description: User already exists, either with the same email or the same username

  /users/update/{user_id}:
    post:
      tags:
        - users
      summary: Updates user information
      operationId: updateMyInformation
      description: |
        With the some information, the user is updated. It will only udpdate the information given in the body, the rest will stay as it was.
      parameters:
        - name: user_id
          in: path
          description: user_id of the user you want to get the information
          required: true
          schema:
            type: string
            format: "uuid"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateItem'
      responses:
        '200':
          description: User updated correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: The email can not be changed or the password can not be changed
        '404':
          description: User does not exists
        '409':
          description: User already exists (email or username are taken)

  /users/logout:
    post:
      tags:
        - users
      summary: User logout
      security:
        - LoggedInToken: [ ]
      operationId: logout
      description: |
        When loging out, the user token will be deleted in the database.
      responses:
        '200':
          description: Success
        '400':
          description: Invalid token
        '401':
          description: Unauthorized



components:
  schemas:
    EventCreateItem:
      type: object
      required:
        - name
        - url
        - description
        - start_date
        - end_date
        - location
        - header_image
      properties:
        name:
          type: string
          example: "HackUPC 2023"
        url:
          type: string
          format: url
          example: "https://www.hackupc.com"
        description:
          type: string
          example: "The biggest hackathon in Europe"
        start_date:
          type: string
          format: date-time
          example: "12/05/2023 09:00"
        end_date:
          type: string
          format: date-time
          example: "14/05/2023 20:00"
        location:
          type: string
          example: "Campus Nord"
        header_image:
          type: string
          example: "https://hackupc.com/ogimage.png"

    EventUpdateItem:
      type: object
      properties:
        name:
          type: string
          example: "HackUPC 2023"
        url:
          type: string
          format: url
          example: "https://www.hackupc.com"
        description:
          type: string
          example: "The biggest hackathon in Europe"
        start_date:
          type: string
          format: date-time
          example: "12/05/2023 09:00"
        end_date:
          type: string
          format: date-time
          example: "14/05/2023 20:00"
        location:
          type: string
          example: "Campus Nord"
        header_image:
          type: string
          example: "https://hackupc.com/ogimage.png"

    Event:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "c9d1d737-fdb5-4c38-b452-75dddfe5b414"
        name:
          type: string
          example: "HackUPC 2023"
        url:
          type: string
          format: url
          example: "https://www.hackupc.com"
        description:
          type: string
          example: "The biggest hackathon in Europe"
        start_date:
          type: string
          format: date-time
          example: "12/05/2023 09:00"
        end_date:
          type: string
          format: date-time
          example: "14/05/2023 20:00"
        location:
          type: string
          example: "Campus Nord"
        header_image:
          type: string
          example: "https://hackupc.com/ogimage.png"
        deleted:
          type: boolean
          example: false

    EventList:
      type: array
      items:
        $ref: '#/components/schemas/Event'

  UserCreateItem:
    type: object
    required:
      - email
      - password
      - first_name
      - last_name
      - username
      - bio
      - profile_image
    properties:
      email:
        type: string
        format: email
        example: "carlota@hackupc.com"
      password:
        type: string
        example: "123456asdf"
      first_name:
        type: string
        example: "Carlota"
      last_name:
        type: string
        example: "Catot Bragós"
      username:
        type: string
        example: "carlotacb"
      bio:
        type: string
        example: "This is Carlota here! A HackUPC organizer"
      profile_image:
        type: string
        format: url
        example: "https://cdn.vectorstock.com/i/preview-1x/15/40/blank-profile-picture-image-holder-with-a-crown-vector-42411540.jpg"

  UserUpdateItem:
    type: object
    properties:
      username:
        type: string
        example: "carlotacb"
      first_name:
        type: string
        example: "Carlota"
      last_name:
        type: string
        example: "Catot Bragós"
      bio:
        type: string
        example: "This is Carlota here! A HackUPC organizer"
      profile_image:
        type: string
        format: url
        example: "https://cdn.vectorstock.com/i/preview-1x/15/40/blank-profile-picture-image-holder-with-a-crown-vector-42411540.jpg"

  User:
    type: object
    properties:
      id:
        type: string
        format: uuid
        example: "ef6f6fb3-ba12-43dd-a0da-95de8125b1cc"
      username:
        type: string
        example: "carlotacb"
      email:
        type: string
        format: email
        example: "carlota@hackupc.com"
      first_name:
        type: string
        example: "Carlota"
      last_name:
        type: string
        example: "Catot Bragós"
      bio:
        type: string
        example: "This is Carlota here! A HackUPC organizer"
      profile_image:
        type: string
        format: url
        example: "https://cdn.vectorstock.com/i/preview-1x/15/40/blank-profile-picture-image-holder-with-a-crown-vector-42411540.jpg"

  UserList:
    type: array
    items:
      $ref: '#/components/schemas/User'