openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/carlotacb/Organizator-API/0.2.0
  - description: LocalHost
    url: http://0.0.0.0:8000/organizator-api
  - description: Production API
    url: https://event-organizator-api-c6wz5mj4uq-ew.a.run.app/organizator-api
info:
  description: API for organizator app
  version: "0.2.0"
  title: Organizator API
  contact:
    name: Carlota Catot
    email: carkbra@gmail.com
    url: 'https://carlotacb.dev'
  license:
    name: MIT license
    url: 'https://opensource.org/license/mit'

tags:
  - name: events
    description: Everything about the events
  - name: users
    description: Everything about users
  - name: applications
    description: Everything about applications

paths:

  # EVENTS

  /events/:
    get:
      tags:
        - events
      summary: Gets all the events of the system
      operationId: allEvents
      description: |
        Get absolutely all the events of the system with all the information
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventList'

  /events/{event_id}:
    get:
      tags:
        - events
      summary: Get event by id
      operationId: eventById
      description: |
        Get all the information for an event given a ID, also marking if the event has been deleted or not.
      parameters:
      - name: event_id
        in: path
        description: Event id
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found

  /events/upcoming:
    get:
      tags:
        - events
      summary: Gets all the upcoming events of the system
      operationId: allUpcomingEvents
      description: |
        Get all the upcoming events that are not deleted of the system with all the information
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventList'

  /events/upcoming/applications:
    get:
      tags:
        - events
      security:
        - LoggedInToken: []
      summary: Gets the participants data from upcoming events
      operationId: allUpcomingEventsParticipants
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventParticipantsInfo'
        '400':
          description: Invalid token
        '401':
          description: Unauthorized (no token or user is not admin)
        '404':
          description: User does not exists

  /events/new:
    post:
      tags:
        - events
      summary: Creates a new event
      operationId: newEvent
      security:
        - LoggedInToken: []
      description: |
        With the all the information for an event, if you have role ORGANIZER_ADMIN, you can create the event be aware that the event name is unique and also the dates should be something logical.

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreateItem'
        description: Event to add
      responses:
        '201':
          description: Event created correctly
        '400':
          description: Invalid token
        '401':
          description: Unauthorized or Only organizer admins can create events
        '409':
          description: Event already exists

  /events/update/{event_id}:
    post:
      tags:
        - events
      summary: Update event by id
      operationId: updateById
      security:
        - LoggedInToken: []
      description: |
        With some event information, not all the information is necessary to update, the event is updated. If you are not setting some of the parameters, they will stay as it was in the original event. The name should be diferent as any event from the database.
        
        This call is only authorized for organizers and organizers admin users.
      parameters:
      - name: event_id
        in: path
        description: Event id
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventUpdateItem'
        description: Event information to update
      responses:
        '202':
          description: Event modified correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid token
        '401':
          description: Unauthorized or Only organizers and admins can update events
        '404':
          description: Event not found
        '409':
          description: Event already exist, there is some event with that name already

  /events/delete/{event_id}:
    post:
      tags:
        - events
      summary: Delete event by id
      security:
        - LoggedInToken: []
      operationId: deleteById
      description: |
        Given a event ID, the event is marked as deleted, the event is not deleted in the DB but the delete_at date is introduced with the current date, so the event is marked as deleted.
        
        This call is only authorized for organizers admin users.
      parameters:
      - name: event_id
        in: path
        description: Event id
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '202':
          description: Event modified correctly
        '400':
          description: Invalid token
        '401':
          description: Unauthorized or Only organizer admins can create events
        '404':
          description: Event not found

  # USERS

  /users/:
    get:
      tags:
        - users
      summary: Gets all the users registered in the system
      operationId: allUsers
      description: |
        Get absolutely all the users of the system, with all the information about them
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'

  /users/{user_id}:
    get:
      tags:
        - users
      summary: Get user information by user id
      operationId: getUserByUserId
      description: |
        Get all the information of a user by giving the user id.
      parameters:
      - name: user_id
        in: path
        description: user_id of the user you want to get the information
        required: true
        schema:
          type: string
          format: "uuid"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

  /users/{username}:
    get:
      tags:
        - users
      summary: Get user information by username
      operationId: getUserByUsername
      description: |
        Get all the information of a user by giving the username.
      parameters:
      - name: username
        in: path
        description: username of the user you want to get the information
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

  /users/login:
    post:
      tags:
        - users
      summary: User login
      operationId: login
      description: |
        When user is logged in this have a token that will authenticate. This is the response of the call.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "carlota"
                password:
                  type: string
                  example: "******"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    format: "uuid"
                    example: "ef6f6fb3-ba12-43dd-a0da-95de8125b1cc"
        '401':
          description: Invalid password
        '404':
          description: User not found

  /users/new:
    post:
      tags:
        - users
      summary: Creates a new user with the basic information
      operationId: newUser
      description: |
        With the base information of a user, you can create a user be aware that the username and the email should be unique. 
        
        Also if you check that you are student, university, degree and expected_graduation are mandatory and if you check that you work, then current_job_role is mandatory.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateItem'
      responses:
        '201':
          description: User created correctly
        '422':
          description: Unexpected body (the body in uncomplete, the work information is missing or the study information is missing)
        '409':
          description: User already exists, either with the same email or the same username

  /users/me:
    get:
      tags:
        - users
      summary: Get my information
      operationId: getMyInformation
      security:
        - LoggedInToken: []
      description: |
        Get all the information of my profile.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid token
        '401':
          description: Unauthorized
        '404':
          description: User not found

  /users/me/role:
    get:
      tags:
        - users
      security:
        - LoggedInToken: []
      summary: Gets user role
      operationId: getMyInformationRole
      description: |
        Get the user role
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
        '400':
          description: Invalid token
        '401':
          description: Unauthorized
        '404':
          description: User not found

  /users/update/role/{user_id}:
    post:
      tags:
        - users
      summary: Updates the user role
      security:
        - LoggedInToken: []
      operationId: updateUserRole
      description: |
        Given a user_id, the role is changed for the one in the body. This call can only be done by the organizer admins.
      parameters:
      - name: user_id
        in: path
        description: username for the user that we want to get
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRole'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        '400':
          description: Invalid token or Invalid role
        '401':
          description: Unauthorized (no token or user is not admin)
        '404':
          description: User not found
        '422':
          description: Unexpected body

  /users/update/me:
    post:
      tags:
        - users
      summary: Updates user information
      security:
        - LoggedInToken: []
      operationId: updateMyInformation
      description: |
        With the some information, the user is updated. It will only udpdate the information given in the body, the rest will stay as it was. In this call you are updating your information, it's not allowed to update information from other users.
        
        If you check that you are student, university, degree and expected_graduation are mandatory and if you check that you work, then current_job_role is mandatory.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateItem'
      responses:
        '200':
          description: User updated correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid token
        '401':
          description: Unauthorized
        '403':
          description: The email can not be changed or the password can not be changed
        '404':
          description: User does not exists
        '409':
          description: User already exists (email or username are taken)
        '422':
          description: Missing either work or study information depending on what is checked

  /users/logout:
    post:
      tags:
        - users
      summary: User logout
      security:
        - LoggedInToken: []
      operationId: logout
      description: |
        When loging out, the user token will be deleted in the database.
      responses:
        '200':
          description: Success
        '400':
          description: Invalid token
        '401':
          description: Unauthorized


  # APLICATIONS

  /applications/myevents:
    get:
      tags:
        - applications
      summary: Get all my events
      security:
        - LoggedInToken: []
      operationId: getMyEvents
      description: |
        Get the list of the applications with the events information, the events are ordered by start_date in descending order.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationsWithEvents'
        '400':
          description: Invalid token
        '401':
          description: Unauthorized
        '404':
          description: User not found

  /applications/participants/{event_id}:
    get:
      tags:
        - applications
      summary: Get all the participants for an event
      security:
        - LoggedInToken: []
      operationId: getEventParticipants
      parameters:
      - name: event_id
        in: path
        description: Event id
        required: true
        schema:
          type: string
          format: uuid
      description: |
        Get the list of the participant of the event with all the user information for each participant
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationsWithUsers'
        '400':
          description: Invalid token
        '401':
          description: Unauthorized (no token or user is not admin)
        '404':
          description: Event not found

  /applications/new:
    post:
      tags:
        - applications
      summary: Create a new application
      security:
        - LoggedInToken: []
      operationId: newApplication
      description: |
        User with participant role can apply to an event.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                event_id:
                  type: string
                  format: uuid
                  example: "ef6f6fb3-ba12-43dd-a0da-95de8125b1cc"
      responses:
        '201':
          description: Success
        '400':
          description: Invalid token
        '401':
          description: Unauthorized or invalid user role or too young or not student
        '403':
          description: Event already started
        '404':
          description: Event not found or User not found
        '409':
          description: Application already exists
        '422':
          description: Event id is required or Profile not completed




components:
  schemas:
    EventCreateItem:
      type: object
      required:
        - name
        - url
        - description
        - start_date
        - end_date
        - location
        - header_image
        - open_for_participants
        - max_participants
        - expected_attrition_rate
        - students_only
        - age_restrictions
      properties:
        name:
          type: string
          example: "HackUPC 2023"
        url:
          type: string
          format: url
          example: "https://www.hackupc.com"
        description:
          type: string
          example: "The biggest hackathon in Europe"
        start_date:
          type: string
          format: date-time
          example: "12/05/2023 09:00"
        end_date:
          type: string
          format: date-time
          example: "14/05/2023 20:00"
        location:
          type: string
          example: "Campus Nord"
        header_image:
          type: string
          example: "https://hackupc.com/ogimage.png"
        open_for_participants:
          type: boolean
          example: true
        max_participants:
          type: integer
          example: 100
        expected_attrition_rate:
          type: number
          example: 0.2
        students_only:
          type: boolean
          example: true
        age_restrictions:
          type: integer
          example: 18

    EventUpdateItem:
      type: object
      properties:
        name:
          type: string
          example: "HackUPC 2023"
        url:
          type: string
          format: url
          example: "https://www.hackupc.com"
        description:
          type: string
          example: "The biggest hackathon in Europe"
        start_date:
          type: string
          format: date-time
          example: "12/05/2023 09:00"
        end_date:
          type: string
          format: date-time
          example: "14/05/2023 20:00"
        location:
          type: string
          example: "Campus Nord"
        header_image:
          type: string
          example: "https://hackupc.com/ogimage.png"
        open_for_participants:
          type: boolean
          example: true
        max_participants:
          type: integer
          example: 100
        expected_attrition_rate:
          type: number
          example: 0.2
        students_only:
          type: boolean
          example: true
        age_restrictions:
          type: integer
          example: 18

    Event:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "c9d1d737-fdb5-4c38-b452-75dddfe5b414"
        name:
          type: string
          example: "HackUPC 2023"
        url:
          type: string
          format: url
          example: "https://www.hackupc.com"
        description:
          type: string
          example: "The biggest hackathon in Europe"
        start_date:
          type: string
          format: date-time
          example: "12/05/2023 09:00"
        end_date:
          type: string
          format: date-time
          example: "14/05/2023 20:00"
        location:
          type: string
          example: "Campus Nord"
        header_image:
          type: string
          example: "https://hackupc.com/ogimage.png"
        open_for_participants:
          type: boolean
          example: true
        max_participants:
          type: integer
          example: 100
        expected_attrition_rate:
          type: number
          example: 0.2
        students_only:
          type: boolean
          example: true
        age_restrictions:
          type: integer
          example: 18
        deleted:
          type: boolean
          example: false

    EventList:
      type: array
      items:
        $ref: '#/components/schemas/Event'

    EventParticipantsInfo:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
            example: "HackUPC 2023"
          actual_participants_count:
            type: integer
            example: 25
          max_participants:
            type: integer
            example: 100
          expected_attrition_rate:
            type: number
            example: 0.2

    UserCreateItem:
      type: object
      required:
        - email
        - password
        - first_name
        - last_name
        - username
        - bio
        - profile_image
        - date_of_birth
        - study
        - work
      properties:
        email:
          type: string
          format: email
          example: "carlota@hackupc.com"
        password:
          type: string
          example: "123456asdf"
        first_name:
          type: string
          example: "Carlota"
        last_name:
          type: string
          example: "Catot Bragós"
        username:
          type: string
          example: "carlotacb"
        bio:
          type: string
          example: "This is Carlota here! A HackUPC organizer"
        profile_image:
          type: string
          format: url
          example: "https://cdn.vectorstock.com/i/preview-1x/15/40/blank-profile-picture-image-holder-with-a-crown-vector-42411540.jpg"
        date_of_birth:
          type: string
          format: "DD/MM/YYYY"
          example: "07/05/1996"
        study:
          type: boolean
          example: true
        work:
          type: boolean
          example: false
        university:
          type: string
          example: "Universitat Politécnica de Catalunya"
        degree:
          type: string
          example: "Computer Science"
        expected_graduation:
          type: string
          format: "DD/MM/YYYY"
          example: "25/01/2024"
        current_job_role:
          type: string

    UserUpdateItem:
      type: object
      properties:
        username:
          type: string
          example: "carlotacb"
        first_name:
          type: string
          example: "Carlota"
        last_name:
          type: string
          example: "Catot Bragós"
        bio:
          type: string
          example: "This is Carlota here! A HackUPC organizer"
        profile_image:
          type: string
          format: url
          example: "https://cdn.vectorstock.com/i/preview-1x/15/40/blank-profile-picture-image-holder-with-a-crown-vector-42411540.jpg"
        date_of_birth:
          type: string
          format: "DD/MM/YYYY"
          example: "07/05/1996"
        study:
          type: boolean
          example: true
        work:
          type: boolean
          example: false
        university:
          type: string
          example: "Universitat Politécnica de Catalunya"
        degree:
          type: string
          example: "Computer Science"
        current_job_role:
          type: string
        tshirt:
          type: string
          enum: [XS, S, M, L, XL, XXL]
          example: "XS"
        gender:
          type: string
          enum: [Female, Male, Non binary, Prefer not to say]
          example: "Female"
        alimentary_restrictions:
          type: string
          example: "No restrictions"
        github:
          type: string
          example: ""
        linkedin:
          type: string
        devpost:
          type: string
        webpage:
          type: string
        expected_graduation:
          type: string
          format: "DD/MM/YYYY"
          example: "25/01/2024"

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "ef6f6fb3-ba12-43dd-a0da-95de8125b1cc"
        username:
          type: string
          example: "carlotacb"
        email:
          type: string
          format: email
          example: "carlota@hackupc.com"
        first_name:
          type: string
          example: "Carlota"
        last_name:
          type: string
          example: "Catot Bragós"
        bio:
          type: string
          example: "This is Carlota here! A HackUPC organizer"
        profile_image:
          type: string
          format: url
          example: "https://cdn.vectorstock.com/i/preview-1x/15/40/blank-profile-picture-image-holder-with-a-crown-vector-42411540.jpg"
        role:
          type: string
          enum: [Participant, Organizer, Organizer admin]
          example: "Organizer admin"
        date_of_birth:
          type: string
          format: "DD/MM/YYYY"
          example: "07/05/1996"
        study:
          type: boolean
          example: true
        work:
          type: boolean
          example: false
        university:
          type: string
          example: "Universitat Politécnica de Catalunya"
        degree:
          type: string
          example: "Computer Science"
        current_job_role:
          type: string
        tshirt:
          type: string
          enum: [XS, S, M, L, XL, XXL]
          example: "XS"
        gender:
          type: string
          enum: [Female, Male, Non binary, Prefer not to say]
          example: "Female"
        alimentary_restrictions:
          type: string
          example: "No restrictions"
        github:
          type: string
          example: ""
        linkedin:
          type: string
        devpost:
          type: string
        webpage:
          type: string
        expected_graduation:
          type: string
          format: "DD/MM/YYYY"
          example: "25/01/2024"

    UserList:
      type: array
      items:
        $ref: '#/components/schemas/User'

    UserRole:
      type: object
      properties:
        role:
          type: string
          enum: [Participant, Organizer, Organizer admin]
          example: "Participant"

    ApplicationsWithEvents:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            format: uuid
            example: "ef6f6fb3-ba12-43dd-a0da-95de8125b1cc"
          event:
            $ref: '#/components/schemas/Event'
          status:
            type: string
            enum: [Pending, Invited, Confirmed, Cancelled, Invalid, Rejected, Waitlist]
            example: "Under review"
          created_at:
            type: string
            example: "2024-01-08T16:29:36Z"
          update_at:
            type: string
            example: "2024-01-08T16:29:36Z"

    ApplicationsWithUsers:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            format: uuid
            example: "ef6f6fb3-ba12-43dd-a0da-95de8125b1cc"
          user:
            $ref: '#/components/schemas/User'
          status:
            type: string
            enum: [Pending, Invited, Confirmed, Cancelled, Invalid, Rejected, Waitlist]
            example: "Under review"
          created_at:
            type: string
            example: "2024-01-08T16:29:36Z"
          update_at:
            type: string
            example: "2024-01-08T16:29:36Z"

  securitySchemes:
    LoggedInToken:
      type: apiKey
      in: header
      name: Authorization